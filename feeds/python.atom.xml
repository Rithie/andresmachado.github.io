<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Andre Machado</title><link href="http://andresmachado.github.io/" rel="alternate"></link><link href="http://andresmachado.github.io/feeds/python.atom.xml" rel="self"></link><id>http://andresmachado.github.io/</id><updated>2016-12-27T22:20:00-03:00</updated><entry><title>Os metódos any() e all()</title><link href="http://andresmachado.github.io/any-e-all-python-methods.html" rel="alternate"></link><published>2016-12-27T22:20:00-03:00</published><updated>2016-12-27T22:20:00-03:00</updated><author><name>Andre Machado</name></author><id>tag:andresmachado.github.io,2016-12-07:any-e-all-python-methods.html</id><summary type="html">&lt;p&gt;Que o Python tem umas funções muito legais todo mundo já sabia e essas funções facilitam um bocado a nossa vida no dia-a-dia.&lt;/p&gt;
&lt;p&gt;As funçoes &lt;strong&gt;any()&lt;/strong&gt; e &lt;strong&gt;all()&lt;/strong&gt; são duas dessas funções que nos ajudam na hora do sufoco para verificar a existência de objetos em listas, strings e etc.&lt;/p&gt;
&lt;p&gt;Dia desses precisei verificar se uma dada frase era um &lt;em&gt;pangrama&lt;/em&gt;, que nada mais é que uma frase que contém todas as letras do alfabeto. Sendo a mais conhecida delas no mundo do desenvolvimento a: &lt;em&gt;The quick brown fox jumps over the lazy dog&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Antes de mostrar a solução para esse problema, vamos ver como as funções se comportam:&lt;/p&gt;
&lt;div class="codehilite" style="background: #202020"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;lista_verdadeira&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;=&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;[&lt;/span&gt;&lt;span style="color: #ed9d13"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;,&lt;/span&gt; &lt;span style="color: #3677a9"&gt;1&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;,&lt;/span&gt; &lt;span style="color: #24909d"&gt;True&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;]&lt;/span&gt; &lt;span style="color: #999999; font-style: italic"&gt;# Lista com valores verdadeiros apenas;&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;lista_falsa&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;=&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;[&lt;/span&gt;&lt;span style="color: #ed9d13"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;,&lt;/span&gt; &lt;span style="color: #3677a9"&gt;0&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;,&lt;/span&gt; &lt;span style="color: #24909d"&gt;False&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;]&lt;/span&gt; &lt;span style="color: #999999; font-style: italic"&gt;# Lista com valores falsos apenas;&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;lista_mista&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;=&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;[&lt;/span&gt;&lt;span style="color: #ed9d13"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;,&lt;/span&gt; &lt;span style="color: #ed9d13"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;,&lt;/span&gt; &lt;span style="color: #3677a9"&gt;0&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;,&lt;/span&gt; &lt;span style="color: #24909d"&gt;True&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;,&lt;/span&gt; &lt;span style="color: #24909d"&gt;False&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;]&lt;/span&gt; &lt;span style="color: #999999; font-style: italic"&gt;# Lista com valores verdadeiros e falsos;&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #24909d"&gt;any&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;(lista_mista)&lt;/span&gt;
&lt;span style="color: #24909d"&gt;True&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #24909d"&gt;any&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;(lista_falsa)&lt;/span&gt;
&lt;span style="color: #24909d"&gt;False&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #24909d"&gt;any&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;(lista_verdadeira)&lt;/span&gt;
&lt;span style="color: #24909d"&gt;True&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #24909d"&gt;all&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;(lista_mista)&lt;/span&gt;
&lt;span style="color: #24909d"&gt;False&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #24909d"&gt;all&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;(lista_falsa)&lt;/span&gt;
&lt;span style="color: #24909d"&gt;False&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #24909d"&gt;all&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;(lista_verdadeira)&lt;/span&gt;
&lt;span style="color: #24909d"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como deu pra perceber no código acima, a função &lt;strong&gt;all()&lt;/strong&gt; retorna &lt;strong&gt;True&lt;/strong&gt; apenas se &lt;strong&gt;&lt;em&gt;todos&lt;/em&gt;&lt;/strong&gt; os elementos de uma lista forem verdadeiros. Quaisquer elementos que sejam &lt;em&gt;False&lt;/em&gt; faz a função all() retornar &lt;em&gt;False&lt;/em&gt;. O mesmo funciona para a função &lt;strong&gt;any()&lt;/strong&gt;. Se &lt;strong&gt;&lt;em&gt;qualquer&lt;/em&gt;&lt;/strong&gt; elemento for verdadeiro, ele retorna &lt;strong&gt;True&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Voltando ao problema do pangrama.&lt;/h3&gt;
&lt;p&gt;Isto posto, para resolver o problema do pangrama eu utilizei toda a magia do Python utilizando o metodo all() juntamente com um &lt;em&gt;generator&lt;/em&gt; (assunto para outro post) assim:&lt;/p&gt;
&lt;div class="codehilite" style="background: #202020"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #6ab825; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #447fcf; text-decoration: underline"&gt;string&lt;/span&gt; &lt;span style="color: #6ab825; font-weight: bold"&gt;import&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;ascii_lowercase&lt;/span&gt; &lt;span style="color: #999999; font-style: italic"&gt;# Importa todas as letras do alfabeto romano em minusculas&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;frase&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;=&lt;/span&gt; &lt;span style="color: #ed9d13"&gt;&amp;#39;The quick brown fox jumps over the lazy dog&amp;#39;&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #6ab825; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #447fcf"&gt;is_pangram&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;(string):&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span style="color: #6ab825; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #24909d"&gt;all&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;(c.lower()&lt;/span&gt; &lt;span style="color: #6ab825; font-weight: bold"&gt;for&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;c&lt;/span&gt; &lt;span style="color: #6ab825; font-weight: bold"&gt;in&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;string&lt;/span&gt; &lt;span style="color: #6ab825; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;c&lt;/span&gt; &lt;span style="color: #6ab825; font-weight: bold"&gt;in&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;ascii_lowercase)&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;is_pangram(frase)&lt;/span&gt;
&lt;span style="color: #24909d"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Calma, não se preocupe. Pode parecer magia negra a primeira vista mas não é. Neste exemplo, eu utilizei uma &lt;em&gt;feature&lt;/em&gt; do Python chamada expressão geradora ou generator expression. O que essa expressão acima faz é percorrer toda a string passada como argumento, item a item (&lt;strong&gt;c.lower() for c in string&lt;/strong&gt;), e verifica se este caractere (&lt;strong&gt;if c in&lt;/strong&gt;) está dentro do alfabeto (&lt;strong&gt;ascii_lowercase&lt;/strong&gt;). O metódo &lt;strong&gt;lower()&lt;/strong&gt; como o nome já diz, transforma o caractere em minusculo, para tornar a expressão case insensitive.&lt;/p&gt;
&lt;h3&gt;A função any()&lt;/h3&gt;
&lt;p&gt;Um exemplo de uso da função &lt;strong&gt;any()&lt;/strong&gt; é verificar se uma string possui alguma vogal, por exemplo:&lt;/p&gt;
&lt;div class="codehilite" style="background: #202020"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;saudacao&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;=&lt;/span&gt; &lt;span style="color: #ed9d13"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;vogais&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;=&lt;/span&gt; &lt;span style="color: #ed9d13"&gt;&amp;#39;aeiou&amp;#39;&lt;/span&gt;
&lt;span style="color: #d0d0d0"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #24909d"&gt;any&lt;/span&gt;&lt;span style="color: #d0d0d0"&gt;(c&lt;/span&gt; &lt;span style="color: #6ab825; font-weight: bold"&gt;for&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;c&lt;/span&gt; &lt;span style="color: #6ab825; font-weight: bold"&gt;in&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;saudacao&lt;/span&gt; &lt;span style="color: #6ab825; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;c&lt;/span&gt; &lt;span style="color: #6ab825; font-weight: bold"&gt;in&lt;/span&gt; &lt;span style="color: #d0d0d0"&gt;vogais)&lt;/span&gt;
&lt;span style="color: #24909d"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ler uma expressão &lt;strong&gt;any()&lt;/strong&gt; facilita o entendimento. Leia a função assim "Retorne verdadeiro para qualquer(any) caractere(c) em 'string' se o caractere estiver(in) em vogais"&lt;/p&gt;
&lt;h1&gt;Considerações finais&lt;/h1&gt;
&lt;p&gt;Vimos neste post que duas funções embutidas do Python podem fazer MUITO trabalho para nos, transformando um código que seria escrito com muitas linhas e com baixo desempenho em uma expressão concisa e de alto desempenho.&lt;/p&gt;
&lt;p&gt;Por hoje é só pessoal. Este é meu primeiro post aqui e eu espero trazer muito mais. Aguardem que em 2017 tem uma série de posts sobre Python aqui.&lt;/p&gt;
&lt;p&gt;Saudações e &lt;strong&gt;Keep Coding!&lt;/strong&gt;&lt;/p&gt;</summary><category term="python"></category><category term="metodos"></category></entry><entry><title>Olá! Bem-vindos ao meu blog sobre Python.</title><link href="http://andresmachado.github.io/welcome-post.html" rel="alternate"></link><published>2016-11-28T09:08:00-03:00</published><updated>2016-11-28T09:08:00-03:00</updated><author><name>Andre Machado</name></author><id>tag:andresmachado.github.io,2016-11-28:welcome-post.html</id><summary type="html">&lt;p&gt;Olá você. Bem-vindo ao meu espaço particular de compartilhamento de conhecimento. Acredito que se chegou até aqui foi por interesse em minha opinião ou em meu conhecimento em algum assunto relacionado a essa linguagem fantástica chamada &lt;strong&gt;Python&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Se foi isso, agradeço imensamente a sua presença em meu blog. Este espaço é destinado a todas as pessoas que se interessam em aprender mais ou tirar dúvidas sobre problemas contidianos em nosso dia-a-dia de programação. Trabalho com Python a algum tempo, mas ainda me considero iniciante, pois busco sempre me aperfeiçoar e entender as milhares de coisas bacanas que o Python pode nós oferecer.&lt;/p&gt;
&lt;p&gt;Espero poder lhe ajudar de alguma forma e que sua estadia seja proveitosa e que suas dúvidas sejam sanadas. No mais, divirta-se e lembre-se:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;# Keep Hacking!&lt;/strong&gt;&lt;/p&gt;</summary><category term="python"></category><category term="welcome"></category></entry></feed>